generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileType {
  PATIENT
  DONOR
}

enum AllocationStatus {
  PENDING
  MATCHED
  CLAIMED
  EXPIRED
}

enum StaffStatus {
  ACTIVE
  SUSPENDED
}

enum CampaignStatus {
  ACTIVE
  COMPLETED
  DELETED
  PENDING
  SUSPENDED
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TransactionType {
  DONATION
  APPOINTMENT
  PAYOUT
  REFUND
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id             String   @id @default(uuid())
  fullName           String
  email          String   @unique
  phone          String?
  passwordHash   String
  // profile        ProfileType @default(PATIENT)
  createdAt      DateTime @default(now())
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]

  patientProfile PatientProfile?
  donorProfile   DonorProfile?

  waitlists      Waitlist[]        @relation("UserWaitlists")
  donationCampaigns DonationCampaign[] @relation("UserDonationCampaigns")
  donationAllocations DonationAllocation[] @relation("UserDonationAllocations")
  appointments   Appointment[]     @relation("UserAppointments")
  notifications    NotificationRecipient[]
}

model PatientProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  gender     Gender?
  dateOfBirth DateTime
  city       String?
  state      String?
  emailVerified  DateTime?


  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DonorProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  organizationName  String?
  country           String?
  emailVerified  DateTime?


  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admins {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  
  resetTokens  AdminResetToken[]
}

model AdminResetToken {
  id        String   @id @default(uuid())
  adminId   String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  admin     Admins   @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model ServiceCenter {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  createdAt     DateTime @default(now())
  phone         String?
  centerName    String
  address       String
  state         String
  lga           String
  // approvedStaff CenterStaff[]
  bankAccount   String?
  bankName      String?
  bankCode      String?
  accountName   String?
  status        ServiceCenterStatus @default(INACTIVE)

  staff         CenterStaff[]
  appointments  Appointment[]

  // This is to be replaced with a relation to the ScreeningType model
  services      ScreeningType[]
  
  invitations   CenterStaffInvite[]
  paystackRecipient PaystackRecipient?
  payouts       Payout[]
  screeningTypes ServiceCenterScreeningType[] @relation("ServiceCenterToScreeningTypes")
}

enum ServiceCenterStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model ServiceCenterScreeningType {
  id            String   @id @default(uuid())
  centerId      String
  screeningTypeId String
  amount        Float    @default(10000.0)


  center        ServiceCenter @relation("ServiceCenterToScreeningTypes", fields: [centerId], references: [id], onDelete: Restrict)
  screeningType ScreeningType @relation("ScreeningTypeToServiceCenters", fields: [screeningTypeId], references: [id], onDelete: Restrict)

  @@unique([centerId, screeningTypeId])
}

model ScreeningType {
  id                      String   @id @default(uuid())
  name                    String   @unique
  description             String?
  screeningTypeCategoryId String
  active                  Boolean  @default(true)
  agreedPrice            Float    @default(10000.0) // This is the general price agreed on by all centers

  category                ScreeningTypeCategory @relation(fields: [screeningTypeCategoryId], references: [id], onDelete: Restrict)
  appointments            Appointment[]
  waitlists               Waitlist[]
  campaigns               DonationCampaign[] @relation("DonationCampaignScreeningTypes")
  centers                 ServiceCenter[] // to be replaced with a relation to ServiceCenterScreeningType - Tell AI
  serviceCenters         ServiceCenterScreeningType[] @relation("ScreeningTypeToServiceCenters")
  matchingResults        MatchingScreeningTypeResult[]
}

model ScreeningTypeCategory {
  id          String @id @default(uuid())
  name        String
  description String?

  types       ScreeningType[]
}

model Waitlist {
  id              String           @id @default(uuid())
  screeningTypeId String
  patientId       String
  status          AllocationStatus
  joinedAt        DateTime         @default(now())
  claimedAt       DateTime?
  expiredAt       DateTime?

  screening       ScreeningType    @relation(fields: [screeningTypeId], references: [id], onDelete: Restrict)
  patient         User             @relation("UserWaitlists", fields: [patientId], references: [id], onDelete: Cascade)
  allocation      DonationAllocation?
  
  @@index([status, screeningTypeId, joinedAt])
  @@index([patientId, status])
}

model DonationCampaign {
  id              String           @id @default(uuid())
  donorId         String
  totalAmount   Float // What is currently in bank
  availableAmount Float // Amount available for allocation
  title           String
  purpose         String?
  targetGender    Gender? // format is "number-number"
  targetAgeRange  String?
  targetStates     String[]
  targetLgas       String[]
  status          CampaignStatus
  expiryDate      DateTime? // Optional expiry date for the campaign
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  donor           User             @relation("UserDonationCampaigns", fields: [donorId], references: [id], onDelete: Cascade)
  allocations     DonationAllocation[]
  transactions    Transaction[]    @relation("DonationTransactions")
  screeningTypes  ScreeningType[]  @relation("DonationCampaignScreeningTypes")
  
  @@index([status, availableAmount])
  @@index([status, createdAt])
}

model DonationAllocation {
  id            String      @id @default(uuid())
  waitlistId    String      @unique
  appointmentId String?
  patientId     String
  campaignId    String
  claimedAt     DateTime?
  
  // Tracking fields
  matchingExecutionId   String?
  amountAllocated       Float?   // Track actual amount allocated
  createdViaMatching    Boolean  @default(false)

  waitlist      Waitlist    @relation(fields: [waitlistId], references: [id], onDelete: Cascade)
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  patient       User        @relation("UserDonationAllocations", fields: [patientId], references: [id], onDelete: Cascade)
  campaign      DonationCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  matchingExecution MatchingExecution? @relation("MatchingExecutionAllocations", fields: [matchingExecutionId], references: [id])
}

model Appointment {
  id                      String   @id @default(uuid())
  patientId               String
  centerId                String
  screeningTypeId         String
  donationId              String?
  isDonation              Boolean  @default(false)
  appointmentDateTime     DateTime
  transactionId           String? 
  status                  AppointmentStatus
  createdAt               DateTime @default(now())
  cancellationReason   String?
  cancellationDate     DateTime?
  checkInCode             String?   @unique
  checkInCodeExpiresAt    DateTime?

  patient                 User     @relation("UserAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  center                  ServiceCenter @relation(fields: [centerId], references: [id], onDelete: Restrict)
  screeningType           ScreeningType @relation(fields: [screeningTypeId], references: [id], onDelete: Restrict)
  transaction             Transaction?  @relation("TransactionAppointments", fields: [transactionId], references: [id], onDelete: SetNull)
  verification            AppointmentVerification? @relation("AppointmentVerificationAppointment")
  result                  ScreeningResult? @relation("ScreeningResultAppointment")
  allocation              DonationAllocation[]
}

model AppointmentVerification {
  id           String   @id @default(uuid())
  appointmentId  String  @unique
  verifiedBy     String?
  verifiedAt     DateTime

  appointment Appointment @relation("AppointmentVerificationAppointment", fields: [appointmentId], references: [id], onDelete: Cascade)
  verifier CenterStaff? @relation("StaffVerifications", fields: [verifiedBy], references: [id], onDelete: SetNull)
}

model ScreeningResult {
  id            String   @id @default(uuid())
  appointmentId String   @unique
  notes         String?
  uploadedBy    String?
  uploadedAt    DateTime @default(now())

  appointment Appointment @relation("ScreeningResultAppointment", fields: [appointmentId], references: [id], onDelete: Cascade)
  uploader    CenterStaff? @relation("StaffUploadedResults", fields: [uploadedBy], references: [id], onDelete: SetNull)
  files       ScreeningResultFile[]
}

model ScreeningResultFile {
  id            String   @id @default(uuid())
  resultId      String
  fileName      String
  filePath      String
  fileType      String
  fileSize      Int
  cloudinaryUrl String
  cloudinaryId  String
  uploadedAt    DateTime @default(now())
  
  // Soft delete fields
  isDeleted     Boolean  @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletionReason String? // Optional reason for deletion
  
  result        ScreeningResult @relation(fields: [resultId], references: [id], onDelete: Cascade)
  deletedByStaff CenterStaff? @relation("StaffDeletedFiles", fields: [deletedBy], references: [id], onDelete: SetNull)
  
  @@index([isDeleted, resultId]) // For efficient filtering
}

model StoreProduct {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  createdAt   DateTime @default(now())
}

model Receipt {
  id                  String   @id @default(uuid())
  transactionId       String   @unique
  receiptNumber       String   @unique // R-YYYYMMDD-NNNN format
  receiptData         Json     // Structured receipt data
  pdfPath             String?  // Cached PDF file path
  emailSentAt         DateTime? // When receipt was emailed
  emailRecipient      String?  // Email address receipt was sent to
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  transaction         Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  @@index([receiptNumber])
  @@index([transactionId])
}

model Transaction {
  id                  String   @id @default(uuid())
  type                TransactionType
  status              TransactionStatus // change this to an enum with e.g., "PENDING", "COMPLETED", "FAILED"
  amount              Float
  relatedDonationId   String?
  paymentReference    String?
  paymentChannel      String?
  createdAt           DateTime @default(now())

  donation            DonationCampaign? @relation("DonationTransactions", fields: [relatedDonationId], references: [id], onDelete: SetNull)
  appointments Appointment[] @relation("TransactionAppointments")
  receipt             Receipt?
  payoutItem          PayoutItem?
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  CANCELLED
  RETRY_PENDING
}

enum PayoutType {
  MANUAL
  AUTOMATED
  RETRY
}

model PaystackRecipient {
  id                    String    @id @default(uuid())
  centerId              String    @unique
  center                ServiceCenter @relation(fields: [centerId], references: [id])
  
  // Paystack details
  recipientCode         String    @unique
  reference             String    @unique
  
  // Bank details snapshot
  bankName              String
  bankCode              String
  accountNumber         String
  accountName           String
  
  // Status
  isActive              Boolean   @default(true)
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  payouts               Payout[]
  
  @@map("paystack_recipients")
}

model Payout {
  id                    String        @id @default(uuid())
  batchReference        String        // For grouping monthly payouts
  payoutNumber          String        @unique
  
  // Center details
  centerId              String
  center                ServiceCenter @relation(fields: [centerId], references: [id])
  recipientId           String?
  recipient             PaystackRecipient? @relation(fields: [recipientId], references: [id])
  
  // Financial details
  amount                Float
  currency              String        @default("NGN")
  paystackFee           Float         @default(10.00) // ₦10 flat fee
  netAmount             Float         // amount - paystackFee
  
  // Paystack details
  transferReference     String?       @unique
  paystackTransferId    String?       @unique
  
  // Status tracking
  status                PayoutStatus  @default(PENDING)
  type                  PayoutType    @default(MANUAL)
  
  // Processing details
  initiatedBy           String?       // Admin ID for manual payouts
  processedAt           DateTime?
  completedAt           DateTime?
  
  // Failure handling
  failureReason         String?
  retryCount            Int           @default(0)
  maxRetries            Int           @default(3)
  
  // Period covered
  periodStart           DateTime
  periodEnd             DateTime
  
  // Metadata
  reason                String
  internalNotes         String?
  
  // Timestamps
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relations
  payoutItems           PayoutItem[]
  
  @@map("payouts")
}

model PayoutItem {
  id                    String        @id @default(uuid())
  payoutId              String
  payout                Payout        @relation(fields: [payoutId], references: [id])
  
  // Transaction reference
  transactionId         String        @unique
  transaction           Transaction   @relation(fields: [transactionId], references: [id])
  
  // Item details
  amount                Float
  description           String
  serviceDate           DateTime
  appointmentId         String?
  
  @@map("payout_items")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  profileType ProfileType
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String
  data      Json?
  createdAt DateTime @default(now())
  recipients NotificationRecipient[]
}

model NotificationRecipient {
  id             String   @id @default(uuid())
  notificationId String
  userId         String
  read           Boolean  @default(false)
  readAt         DateTime?
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CenterStaff {
  id        String   @id @default(uuid())
  centerId  String
  email     String  
  passwordHash String
  role      String?
  status    StaffStatus? @default(ACTIVE)
  createdAt DateTime @default(now())

  center    ServiceCenter @relation(fields: [centerId], references: [id], onDelete: Cascade)
  verifications AppointmentVerification[] @relation("StaffVerifications")
  uploadedResults ScreeningResult[] @relation("StaffUploadedResults")
  deletedResultFiles ScreeningResultFile[] @relation("StaffDeletedFiles")
  resetTokens CenterStaffResetToken[]

  @@unique([centerId, email])
}

model CenterStaffInvite {
  id        String   @id @default(uuid())
  centerId  String
  email     String
  token     String   @unique
  expiresAt DateTime?
  acceptedAt DateTime?

  center    ServiceCenter @relation(fields: [centerId], references: [id], onDelete: Cascade)
}

model CenterStaffResetToken {
  id        String   @id @default(uuid())
  staffId   String
  token     String   @unique
  expiresAt DateTime

  staff     CenterStaff @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum MatchingExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
  PARTIALLY_COMPLETED
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

model MatchingExecution {
  id                    String   @id @default(uuid())
  executionReference    String   @unique // E.g., "MATCH-20250711-001"
  startedAt             DateTime @default(now())
  completedAt           DateTime?
  status                MatchingExecutionStatus @default(RUNNING)
  
  // Summary metrics
  screeningTypesProcessed Int      @default(0)
  patientsEvaluated      Int      @default(0)
  successfulMatches      Int      @default(0)
  skippedDueToLimits     Int      @default(0)
  skippedDueToNoFunding  Int      @default(0)
  skippedDueToExistingMatch Int   @default(0)
  
  // Financial summary
  totalFundsAllocated    Float    @default(0)
  generalPoolFundsUsed   Float    @default(0)
  campaignsUsedCount     Int      @default(0)
  
  // Performance metrics
  processingTimeMs       Int?
  dbQueriesCount         Int      @default(0)
  notificationsSent      Int      @default(0)
  
  // Error tracking
  errors                 Json?    // Array of error objects
  warnings               Json?    // Array of warning objects
  
  // Configuration used
  batchConfig            Json?    // Configuration used for this execution
  
  // Relations
  executionLogs          MatchingExecutionLog[]
  screeningTypeResults   MatchingScreeningTypeResult[]
  allocations            DonationAllocation[] @relation("MatchingExecutionAllocations")
  
  @@map("matching_executions")
}

model MatchingExecutionLog {
  id                String   @id @default(uuid())
  executionId       String
  timestamp         DateTime @default(now())
  level             LogLevel
  message           String
  context           Json?    // Additional context data
  
  // Entity references for traceability
  patientId         String?
  campaignId        String?
  waitlistId        String?
  screeningTypeId   String?
  allocationId      String?
  
  execution         MatchingExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  
  @@index([executionId, timestamp])
  @@map("matching_execution_logs")
}

model MatchingScreeningTypeResult {
  id                    String   @id @default(uuid())
  executionId           String
  screeningTypeId       String
  screeningTypeName     String
  
  // Processing stats
  patientsFound         Int
  patientsProcessed     Int
  matchesCreated        Int
  skippedDueToLimits    Int
  skippedDueToNoFunding Int
  skippedDueToExisting  Int
  
  // Financial stats
  fundsAllocated        Float    @default(0)
  campaignsUsed         Json     // Array of campaign IDs used
  generalPoolUsed       Boolean  @default(false)
  generalPoolAmount     Float    @default(0)
  
  // Targeting stats
  targetingMatches      Int      @default(0)
  targetingMismatches   Int      @default(0)
  
  // Timing
  processingStarted     DateTime @default(now())
  processingCompleted   DateTime?
  processingTimeMs      Int?
  
  execution             MatchingExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  screeningType         ScreeningType @relation(fields: [screeningTypeId], references: [id])
  
  @@unique([executionId, screeningTypeId])
  @@map("matching_screening_type_results")
}
